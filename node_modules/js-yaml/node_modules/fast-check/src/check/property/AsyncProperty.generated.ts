import Arbitrary from '../arbitrary/definition/Arbitrary';
import { tuple } from '../arbitrary/TupleArbitrary';
import { AsyncProperty } from './AsyncProperty.generic';

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
         * @param predicate.t0 Value generated by arb0
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0>(
            arb0:Arbitrary<T0>,
            predicate: (t0:T0) => Promise<boolean|void>
        ): AsyncProperty<[T0]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,
            predicate: (t0:T0,t1:T1) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,
            predicate: (t0:T0,t1:T1,t2:T2) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
* @param arb6 Generate the parameter at position #7 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
* @param predicate.t6 Value generated by arb6
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5,T6>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,arb6:Arbitrary<T6>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5,T6]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
* @param arb6 Generate the parameter at position #7 of predicate
* @param arb7 Generate the parameter at position #8 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
* @param predicate.t6 Value generated by arb6
* @param predicate.t7 Value generated by arb7
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5,T6,T7>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,arb6:Arbitrary<T6>,arb7:Arbitrary<T7>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5,T6,T7]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
* @param arb6 Generate the parameter at position #7 of predicate
* @param arb7 Generate the parameter at position #8 of predicate
* @param arb8 Generate the parameter at position #9 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
* @param predicate.t6 Value generated by arb6
* @param predicate.t7 Value generated by arb7
* @param predicate.t8 Value generated by arb8
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5,T6,T7,T8>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,arb6:Arbitrary<T6>,arb7:Arbitrary<T7>,arb8:Arbitrary<T8>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5,T6,T7,T8]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
* @param arb6 Generate the parameter at position #7 of predicate
* @param arb7 Generate the parameter at position #8 of predicate
* @param arb8 Generate the parameter at position #9 of predicate
* @param arb9 Generate the parameter at position #10 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
* @param predicate.t6 Value generated by arb6
* @param predicate.t7 Value generated by arb7
* @param predicate.t8 Value generated by arb8
* @param predicate.t9 Value generated by arb9
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,arb6:Arbitrary<T6>,arb7:Arbitrary<T7>,arb8:Arbitrary<T8>,arb9:Arbitrary<T9>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5,T6,T7,T8,T9]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
* @param arb6 Generate the parameter at position #7 of predicate
* @param arb7 Generate the parameter at position #8 of predicate
* @param arb8 Generate the parameter at position #9 of predicate
* @param arb9 Generate the parameter at position #10 of predicate
* @param arb10 Generate the parameter at position #11 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
* @param predicate.t6 Value generated by arb6
* @param predicate.t7 Value generated by arb7
* @param predicate.t8 Value generated by arb8
* @param predicate.t9 Value generated by arb9
* @param predicate.t10 Value generated by arb10
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,arb6:Arbitrary<T6>,arb7:Arbitrary<T7>,arb8:Arbitrary<T8>,arb9:Arbitrary<T9>,arb10:Arbitrary<T10>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
* @param arb6 Generate the parameter at position #7 of predicate
* @param arb7 Generate the parameter at position #8 of predicate
* @param arb8 Generate the parameter at position #9 of predicate
* @param arb9 Generate the parameter at position #10 of predicate
* @param arb10 Generate the parameter at position #11 of predicate
* @param arb11 Generate the parameter at position #12 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
* @param predicate.t6 Value generated by arb6
* @param predicate.t7 Value generated by arb7
* @param predicate.t8 Value generated by arb8
* @param predicate.t9 Value generated by arb9
* @param predicate.t10 Value generated by arb10
* @param predicate.t11 Value generated by arb11
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,arb6:Arbitrary<T6>,arb7:Arbitrary<T7>,arb8:Arbitrary<T8>,arb9:Arbitrary<T9>,arb10:Arbitrary<T10>,arb11:Arbitrary<T11>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
* @param arb6 Generate the parameter at position #7 of predicate
* @param arb7 Generate the parameter at position #8 of predicate
* @param arb8 Generate the parameter at position #9 of predicate
* @param arb9 Generate the parameter at position #10 of predicate
* @param arb10 Generate the parameter at position #11 of predicate
* @param arb11 Generate the parameter at position #12 of predicate
* @param arb12 Generate the parameter at position #13 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
* @param predicate.t6 Value generated by arb6
* @param predicate.t7 Value generated by arb7
* @param predicate.t8 Value generated by arb8
* @param predicate.t9 Value generated by arb9
* @param predicate.t10 Value generated by arb10
* @param predicate.t11 Value generated by arb11
* @param predicate.t12 Value generated by arb12
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,arb6:Arbitrary<T6>,arb7:Arbitrary<T7>,arb8:Arbitrary<T8>,arb9:Arbitrary<T9>,arb10:Arbitrary<T10>,arb11:Arbitrary<T11>,arb12:Arbitrary<T12>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
* @param arb6 Generate the parameter at position #7 of predicate
* @param arb7 Generate the parameter at position #8 of predicate
* @param arb8 Generate the parameter at position #9 of predicate
* @param arb9 Generate the parameter at position #10 of predicate
* @param arb10 Generate the parameter at position #11 of predicate
* @param arb11 Generate the parameter at position #12 of predicate
* @param arb12 Generate the parameter at position #13 of predicate
* @param arb13 Generate the parameter at position #14 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
* @param predicate.t6 Value generated by arb6
* @param predicate.t7 Value generated by arb7
* @param predicate.t8 Value generated by arb8
* @param predicate.t9 Value generated by arb9
* @param predicate.t10 Value generated by arb10
* @param predicate.t11 Value generated by arb11
* @param predicate.t12 Value generated by arb12
* @param predicate.t13 Value generated by arb13
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,arb6:Arbitrary<T6>,arb7:Arbitrary<T7>,arb8:Arbitrary<T8>,arb9:Arbitrary<T9>,arb10:Arbitrary<T10>,arb11:Arbitrary<T11>,arb12:Arbitrary<T12>,arb13:Arbitrary<T13>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
* @param arb6 Generate the parameter at position #7 of predicate
* @param arb7 Generate the parameter at position #8 of predicate
* @param arb8 Generate the parameter at position #9 of predicate
* @param arb9 Generate the parameter at position #10 of predicate
* @param arb10 Generate the parameter at position #11 of predicate
* @param arb11 Generate the parameter at position #12 of predicate
* @param arb12 Generate the parameter at position #13 of predicate
* @param arb13 Generate the parameter at position #14 of predicate
* @param arb14 Generate the parameter at position #15 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
* @param predicate.t6 Value generated by arb6
* @param predicate.t7 Value generated by arb7
* @param predicate.t8 Value generated by arb8
* @param predicate.t9 Value generated by arb9
* @param predicate.t10 Value generated by arb10
* @param predicate.t11 Value generated by arb11
* @param predicate.t12 Value generated by arb12
* @param predicate.t13 Value generated by arb13
* @param predicate.t14 Value generated by arb14
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,arb6:Arbitrary<T6>,arb7:Arbitrary<T7>,arb8:Arbitrary<T8>,arb9:Arbitrary<T9>,arb10:Arbitrary<T10>,arb11:Arbitrary<T11>,arb12:Arbitrary<T12>,arb13:Arbitrary<T13>,arb14:Arbitrary<T14>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
* @param arb6 Generate the parameter at position #7 of predicate
* @param arb7 Generate the parameter at position #8 of predicate
* @param arb8 Generate the parameter at position #9 of predicate
* @param arb9 Generate the parameter at position #10 of predicate
* @param arb10 Generate the parameter at position #11 of predicate
* @param arb11 Generate the parameter at position #12 of predicate
* @param arb12 Generate the parameter at position #13 of predicate
* @param arb13 Generate the parameter at position #14 of predicate
* @param arb14 Generate the parameter at position #15 of predicate
* @param arb15 Generate the parameter at position #16 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
* @param predicate.t6 Value generated by arb6
* @param predicate.t7 Value generated by arb7
* @param predicate.t8 Value generated by arb8
* @param predicate.t9 Value generated by arb9
* @param predicate.t10 Value generated by arb10
* @param predicate.t11 Value generated by arb11
* @param predicate.t12 Value generated by arb12
* @param predicate.t13 Value generated by arb13
* @param predicate.t14 Value generated by arb14
* @param predicate.t15 Value generated by arb15
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,arb6:Arbitrary<T6>,arb7:Arbitrary<T7>,arb8:Arbitrary<T8>,arb9:Arbitrary<T9>,arb10:Arbitrary<T10>,arb11:Arbitrary<T11>,arb12:Arbitrary<T12>,arb13:Arbitrary<T13>,arb14:Arbitrary<T14>,arb15:Arbitrary<T15>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
* @param arb6 Generate the parameter at position #7 of predicate
* @param arb7 Generate the parameter at position #8 of predicate
* @param arb8 Generate the parameter at position #9 of predicate
* @param arb9 Generate the parameter at position #10 of predicate
* @param arb10 Generate the parameter at position #11 of predicate
* @param arb11 Generate the parameter at position #12 of predicate
* @param arb12 Generate the parameter at position #13 of predicate
* @param arb13 Generate the parameter at position #14 of predicate
* @param arb14 Generate the parameter at position #15 of predicate
* @param arb15 Generate the parameter at position #16 of predicate
* @param arb16 Generate the parameter at position #17 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
* @param predicate.t6 Value generated by arb6
* @param predicate.t7 Value generated by arb7
* @param predicate.t8 Value generated by arb8
* @param predicate.t9 Value generated by arb9
* @param predicate.t10 Value generated by arb10
* @param predicate.t11 Value generated by arb11
* @param predicate.t12 Value generated by arb12
* @param predicate.t13 Value generated by arb13
* @param predicate.t14 Value generated by arb14
* @param predicate.t15 Value generated by arb15
* @param predicate.t16 Value generated by arb16
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,arb6:Arbitrary<T6>,arb7:Arbitrary<T7>,arb8:Arbitrary<T8>,arb9:Arbitrary<T9>,arb10:Arbitrary<T10>,arb11:Arbitrary<T11>,arb12:Arbitrary<T12>,arb13:Arbitrary<T13>,arb14:Arbitrary<T14>,arb15:Arbitrary<T15>,arb16:Arbitrary<T16>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
* @param arb6 Generate the parameter at position #7 of predicate
* @param arb7 Generate the parameter at position #8 of predicate
* @param arb8 Generate the parameter at position #9 of predicate
* @param arb9 Generate the parameter at position #10 of predicate
* @param arb10 Generate the parameter at position #11 of predicate
* @param arb11 Generate the parameter at position #12 of predicate
* @param arb12 Generate the parameter at position #13 of predicate
* @param arb13 Generate the parameter at position #14 of predicate
* @param arb14 Generate the parameter at position #15 of predicate
* @param arb15 Generate the parameter at position #16 of predicate
* @param arb16 Generate the parameter at position #17 of predicate
* @param arb17 Generate the parameter at position #18 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
* @param predicate.t6 Value generated by arb6
* @param predicate.t7 Value generated by arb7
* @param predicate.t8 Value generated by arb8
* @param predicate.t9 Value generated by arb9
* @param predicate.t10 Value generated by arb10
* @param predicate.t11 Value generated by arb11
* @param predicate.t12 Value generated by arb12
* @param predicate.t13 Value generated by arb13
* @param predicate.t14 Value generated by arb14
* @param predicate.t15 Value generated by arb15
* @param predicate.t16 Value generated by arb16
* @param predicate.t17 Value generated by arb17
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,arb6:Arbitrary<T6>,arb7:Arbitrary<T7>,arb8:Arbitrary<T8>,arb9:Arbitrary<T9>,arb10:Arbitrary<T10>,arb11:Arbitrary<T11>,arb12:Arbitrary<T12>,arb13:Arbitrary<T13>,arb14:Arbitrary<T14>,arb15:Arbitrary<T15>,arb16:Arbitrary<T16>,arb17:Arbitrary<T17>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
* @param arb6 Generate the parameter at position #7 of predicate
* @param arb7 Generate the parameter at position #8 of predicate
* @param arb8 Generate the parameter at position #9 of predicate
* @param arb9 Generate the parameter at position #10 of predicate
* @param arb10 Generate the parameter at position #11 of predicate
* @param arb11 Generate the parameter at position #12 of predicate
* @param arb12 Generate the parameter at position #13 of predicate
* @param arb13 Generate the parameter at position #14 of predicate
* @param arb14 Generate the parameter at position #15 of predicate
* @param arb15 Generate the parameter at position #16 of predicate
* @param arb16 Generate the parameter at position #17 of predicate
* @param arb17 Generate the parameter at position #18 of predicate
* @param arb18 Generate the parameter at position #19 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
* @param predicate.t6 Value generated by arb6
* @param predicate.t7 Value generated by arb7
* @param predicate.t8 Value generated by arb8
* @param predicate.t9 Value generated by arb9
* @param predicate.t10 Value generated by arb10
* @param predicate.t11 Value generated by arb11
* @param predicate.t12 Value generated by arb12
* @param predicate.t13 Value generated by arb13
* @param predicate.t14 Value generated by arb14
* @param predicate.t15 Value generated by arb15
* @param predicate.t16 Value generated by arb16
* @param predicate.t17 Value generated by arb17
* @param predicate.t18 Value generated by arb18
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,arb6:Arbitrary<T6>,arb7:Arbitrary<T7>,arb8:Arbitrary<T8>,arb9:Arbitrary<T9>,arb10:Arbitrary<T10>,arb11:Arbitrary<T11>,arb12:Arbitrary<T12>,arb13:Arbitrary<T13>,arb14:Arbitrary<T14>,arb15:Arbitrary<T15>,arb16:Arbitrary<T16>,arb17:Arbitrary<T17>,arb18:Arbitrary<T18>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
* @param arb6 Generate the parameter at position #7 of predicate
* @param arb7 Generate the parameter at position #8 of predicate
* @param arb8 Generate the parameter at position #9 of predicate
* @param arb9 Generate the parameter at position #10 of predicate
* @param arb10 Generate the parameter at position #11 of predicate
* @param arb11 Generate the parameter at position #12 of predicate
* @param arb12 Generate the parameter at position #13 of predicate
* @param arb13 Generate the parameter at position #14 of predicate
* @param arb14 Generate the parameter at position #15 of predicate
* @param arb15 Generate the parameter at position #16 of predicate
* @param arb16 Generate the parameter at position #17 of predicate
* @param arb17 Generate the parameter at position #18 of predicate
* @param arb18 Generate the parameter at position #19 of predicate
* @param arb19 Generate the parameter at position #20 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
* @param predicate.t6 Value generated by arb6
* @param predicate.t7 Value generated by arb7
* @param predicate.t8 Value generated by arb8
* @param predicate.t9 Value generated by arb9
* @param predicate.t10 Value generated by arb10
* @param predicate.t11 Value generated by arb11
* @param predicate.t12 Value generated by arb12
* @param predicate.t13 Value generated by arb13
* @param predicate.t14 Value generated by arb14
* @param predicate.t15 Value generated by arb15
* @param predicate.t16 Value generated by arb16
* @param predicate.t17 Value generated by arb17
* @param predicate.t18 Value generated by arb18
* @param predicate.t19 Value generated by arb19
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,arb6:Arbitrary<T6>,arb7:Arbitrary<T7>,arb8:Arbitrary<T8>,arb9:Arbitrary<T9>,arb10:Arbitrary<T10>,arb11:Arbitrary<T11>,arb12:Arbitrary<T12>,arb13:Arbitrary<T13>,arb14:Arbitrary<T14>,arb15:Arbitrary<T15>,arb16:Arbitrary<T16>,arb17:Arbitrary<T17>,arb18:Arbitrary<T18>,arb19:Arbitrary<T19>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
* @param arb6 Generate the parameter at position #7 of predicate
* @param arb7 Generate the parameter at position #8 of predicate
* @param arb8 Generate the parameter at position #9 of predicate
* @param arb9 Generate the parameter at position #10 of predicate
* @param arb10 Generate the parameter at position #11 of predicate
* @param arb11 Generate the parameter at position #12 of predicate
* @param arb12 Generate the parameter at position #13 of predicate
* @param arb13 Generate the parameter at position #14 of predicate
* @param arb14 Generate the parameter at position #15 of predicate
* @param arb15 Generate the parameter at position #16 of predicate
* @param arb16 Generate the parameter at position #17 of predicate
* @param arb17 Generate the parameter at position #18 of predicate
* @param arb18 Generate the parameter at position #19 of predicate
* @param arb19 Generate the parameter at position #20 of predicate
* @param arb20 Generate the parameter at position #21 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
* @param predicate.t6 Value generated by arb6
* @param predicate.t7 Value generated by arb7
* @param predicate.t8 Value generated by arb8
* @param predicate.t9 Value generated by arb9
* @param predicate.t10 Value generated by arb10
* @param predicate.t11 Value generated by arb11
* @param predicate.t12 Value generated by arb12
* @param predicate.t13 Value generated by arb13
* @param predicate.t14 Value generated by arb14
* @param predicate.t15 Value generated by arb15
* @param predicate.t16 Value generated by arb16
* @param predicate.t17 Value generated by arb17
* @param predicate.t18 Value generated by arb18
* @param predicate.t19 Value generated by arb19
* @param predicate.t20 Value generated by arb20
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,arb6:Arbitrary<T6>,arb7:Arbitrary<T7>,arb8:Arbitrary<T8>,arb9:Arbitrary<T9>,arb10:Arbitrary<T10>,arb11:Arbitrary<T11>,arb12:Arbitrary<T12>,arb13:Arbitrary<T13>,arb14:Arbitrary<T14>,arb15:Arbitrary<T15>,arb16:Arbitrary<T16>,arb17:Arbitrary<T17>,arb18:Arbitrary<T18>,arb19:Arbitrary<T19>,arb20:Arbitrary<T20>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20]>;

        /**
         * Instanciate a new {@link AsyncProperty}
         * @param arb0 Generate the parameter at position #1 of predicate
* @param arb1 Generate the parameter at position #2 of predicate
* @param arb2 Generate the parameter at position #3 of predicate
* @param arb3 Generate the parameter at position #4 of predicate
* @param arb4 Generate the parameter at position #5 of predicate
* @param arb5 Generate the parameter at position #6 of predicate
* @param arb6 Generate the parameter at position #7 of predicate
* @param arb7 Generate the parameter at position #8 of predicate
* @param arb8 Generate the parameter at position #9 of predicate
* @param arb9 Generate the parameter at position #10 of predicate
* @param arb10 Generate the parameter at position #11 of predicate
* @param arb11 Generate the parameter at position #12 of predicate
* @param arb12 Generate the parameter at position #13 of predicate
* @param arb13 Generate the parameter at position #14 of predicate
* @param arb14 Generate the parameter at position #15 of predicate
* @param arb15 Generate the parameter at position #16 of predicate
* @param arb16 Generate the parameter at position #17 of predicate
* @param arb17 Generate the parameter at position #18 of predicate
* @param arb18 Generate the parameter at position #19 of predicate
* @param arb19 Generate the parameter at position #20 of predicate
* @param arb20 Generate the parameter at position #21 of predicate
* @param arb21 Generate the parameter at position #22 of predicate
         * @param predicate.t0 Value generated by arb0
* @param predicate.t1 Value generated by arb1
* @param predicate.t2 Value generated by arb2
* @param predicate.t3 Value generated by arb3
* @param predicate.t4 Value generated by arb4
* @param predicate.t5 Value generated by arb5
* @param predicate.t6 Value generated by arb6
* @param predicate.t7 Value generated by arb7
* @param predicate.t8 Value generated by arb8
* @param predicate.t9 Value generated by arb9
* @param predicate.t10 Value generated by arb10
* @param predicate.t11 Value generated by arb11
* @param predicate.t12 Value generated by arb12
* @param predicate.t13 Value generated by arb13
* @param predicate.t14 Value generated by arb14
* @param predicate.t15 Value generated by arb15
* @param predicate.t16 Value generated by arb16
* @param predicate.t17 Value generated by arb17
* @param predicate.t18 Value generated by arb18
* @param predicate.t19 Value generated by arb19
* @param predicate.t20 Value generated by arb20
* @param predicate.t21 Value generated by arb21
         * @param predicate Assess the success of the property. Would be considered falsy if its throws or if its output evaluates to false
         */
        function asyncProperty<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>(
            arb0:Arbitrary<T0>,arb1:Arbitrary<T1>,arb2:Arbitrary<T2>,arb3:Arbitrary<T3>,arb4:Arbitrary<T4>,arb5:Arbitrary<T5>,arb6:Arbitrary<T6>,arb7:Arbitrary<T7>,arb8:Arbitrary<T8>,arb9:Arbitrary<T9>,arb10:Arbitrary<T10>,arb11:Arbitrary<T11>,arb12:Arbitrary<T12>,arb13:Arbitrary<T13>,arb14:Arbitrary<T14>,arb15:Arbitrary<T15>,arb16:Arbitrary<T16>,arb17:Arbitrary<T17>,arb18:Arbitrary<T18>,arb19:Arbitrary<T19>,arb20:Arbitrary<T20>,arb21:Arbitrary<T21>,
            predicate: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20,t21:T21) => Promise<boolean|void>
        ): AsyncProperty<[T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21]>;

        function asyncProperty<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>(
            arb0?: Arbitrary<T0> | (() => Promise<boolean|void>),arb1?: Arbitrary<T1> | ((t0:T0) => Promise<boolean|void>),arb2?: Arbitrary<T2> | ((t0:T0,t1:T1) => Promise<boolean|void>),arb3?: Arbitrary<T3> | ((t0:T0,t1:T1,t2:T2) => Promise<boolean|void>),arb4?: Arbitrary<T4> | ((t0:T0,t1:T1,t2:T2,t3:T3) => Promise<boolean|void>),arb5?: Arbitrary<T5> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4) => Promise<boolean|void>),arb6?: Arbitrary<T6> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5) => Promise<boolean|void>),arb7?: Arbitrary<T7> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6) => Promise<boolean|void>),arb8?: Arbitrary<T8> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7) => Promise<boolean|void>),arb9?: Arbitrary<T9> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8) => Promise<boolean|void>),arb10?: Arbitrary<T10> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9) => Promise<boolean|void>),arb11?: Arbitrary<T11> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10) => Promise<boolean|void>),arb12?: Arbitrary<T12> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11) => Promise<boolean|void>),arb13?: Arbitrary<T13> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12) => Promise<boolean|void>),arb14?: Arbitrary<T14> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13) => Promise<boolean|void>),arb15?: Arbitrary<T15> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14) => Promise<boolean|void>),arb16?: Arbitrary<T16> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15) => Promise<boolean|void>),arb17?: Arbitrary<T17> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16) => Promise<boolean|void>),arb18?: Arbitrary<T18> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17) => Promise<boolean|void>),arb19?: Arbitrary<T19> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18) => Promise<boolean|void>),arb20?: Arbitrary<T20> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19) => Promise<boolean|void>),arb21?: Arbitrary<T21> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20) => Promise<boolean|void>),arb22?: Arbitrary<T22> | ((t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20,t21:T21) => Promise<boolean|void>),
            arb23?: (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20,t21:T21,t22:T22) => Promise<boolean|void>
        ) {

        if (arb22) {
            const p = arb22 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20,t21:T21) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>,arb6 as Arbitrary<T6>,arb7 as Arbitrary<T7>,arb8 as Arbitrary<T8>,arb9 as Arbitrary<T9>,arb10 as Arbitrary<T10>,arb11 as Arbitrary<T11>,arb12 as Arbitrary<T12>,arb13 as Arbitrary<T13>,arb14 as Arbitrary<T14>,arb15 as Arbitrary<T15>,arb16 as Arbitrary<T16>,arb17 as Arbitrary<T17>,arb18 as Arbitrary<T18>,arb19 as Arbitrary<T19>,arb20 as Arbitrary<T20>,arb21 as Arbitrary<T21>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15],t[16],t[17],t[18],t[19],t[20],t[21]));
        }

        if (arb21) {
            const p = arb21 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>,arb6 as Arbitrary<T6>,arb7 as Arbitrary<T7>,arb8 as Arbitrary<T8>,arb9 as Arbitrary<T9>,arb10 as Arbitrary<T10>,arb11 as Arbitrary<T11>,arb12 as Arbitrary<T12>,arb13 as Arbitrary<T13>,arb14 as Arbitrary<T14>,arb15 as Arbitrary<T15>,arb16 as Arbitrary<T16>,arb17 as Arbitrary<T17>,arb18 as Arbitrary<T18>,arb19 as Arbitrary<T19>,arb20 as Arbitrary<T20>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15],t[16],t[17],t[18],t[19],t[20]));
        }

        if (arb20) {
            const p = arb20 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>,arb6 as Arbitrary<T6>,arb7 as Arbitrary<T7>,arb8 as Arbitrary<T8>,arb9 as Arbitrary<T9>,arb10 as Arbitrary<T10>,arb11 as Arbitrary<T11>,arb12 as Arbitrary<T12>,arb13 as Arbitrary<T13>,arb14 as Arbitrary<T14>,arb15 as Arbitrary<T15>,arb16 as Arbitrary<T16>,arb17 as Arbitrary<T17>,arb18 as Arbitrary<T18>,arb19 as Arbitrary<T19>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15],t[16],t[17],t[18],t[19]));
        }

        if (arb19) {
            const p = arb19 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>,arb6 as Arbitrary<T6>,arb7 as Arbitrary<T7>,arb8 as Arbitrary<T8>,arb9 as Arbitrary<T9>,arb10 as Arbitrary<T10>,arb11 as Arbitrary<T11>,arb12 as Arbitrary<T12>,arb13 as Arbitrary<T13>,arb14 as Arbitrary<T14>,arb15 as Arbitrary<T15>,arb16 as Arbitrary<T16>,arb17 as Arbitrary<T17>,arb18 as Arbitrary<T18>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15],t[16],t[17],t[18]));
        }

        if (arb18) {
            const p = arb18 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>,arb6 as Arbitrary<T6>,arb7 as Arbitrary<T7>,arb8 as Arbitrary<T8>,arb9 as Arbitrary<T9>,arb10 as Arbitrary<T10>,arb11 as Arbitrary<T11>,arb12 as Arbitrary<T12>,arb13 as Arbitrary<T13>,arb14 as Arbitrary<T14>,arb15 as Arbitrary<T15>,arb16 as Arbitrary<T16>,arb17 as Arbitrary<T17>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15],t[16],t[17]));
        }

        if (arb17) {
            const p = arb17 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>,arb6 as Arbitrary<T6>,arb7 as Arbitrary<T7>,arb8 as Arbitrary<T8>,arb9 as Arbitrary<T9>,arb10 as Arbitrary<T10>,arb11 as Arbitrary<T11>,arb12 as Arbitrary<T12>,arb13 as Arbitrary<T13>,arb14 as Arbitrary<T14>,arb15 as Arbitrary<T15>,arb16 as Arbitrary<T16>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15],t[16]));
        }

        if (arb16) {
            const p = arb16 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>,arb6 as Arbitrary<T6>,arb7 as Arbitrary<T7>,arb8 as Arbitrary<T8>,arb9 as Arbitrary<T9>,arb10 as Arbitrary<T10>,arb11 as Arbitrary<T11>,arb12 as Arbitrary<T12>,arb13 as Arbitrary<T13>,arb14 as Arbitrary<T14>,arb15 as Arbitrary<T15>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15]));
        }

        if (arb15) {
            const p = arb15 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>,arb6 as Arbitrary<T6>,arb7 as Arbitrary<T7>,arb8 as Arbitrary<T8>,arb9 as Arbitrary<T9>,arb10 as Arbitrary<T10>,arb11 as Arbitrary<T11>,arb12 as Arbitrary<T12>,arb13 as Arbitrary<T13>,arb14 as Arbitrary<T14>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14]));
        }

        if (arb14) {
            const p = arb14 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>,arb6 as Arbitrary<T6>,arb7 as Arbitrary<T7>,arb8 as Arbitrary<T8>,arb9 as Arbitrary<T9>,arb10 as Arbitrary<T10>,arb11 as Arbitrary<T11>,arb12 as Arbitrary<T12>,arb13 as Arbitrary<T13>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13]));
        }

        if (arb13) {
            const p = arb13 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>,arb6 as Arbitrary<T6>,arb7 as Arbitrary<T7>,arb8 as Arbitrary<T8>,arb9 as Arbitrary<T9>,arb10 as Arbitrary<T10>,arb11 as Arbitrary<T11>,arb12 as Arbitrary<T12>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12]));
        }

        if (arb12) {
            const p = arb12 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>,arb6 as Arbitrary<T6>,arb7 as Arbitrary<T7>,arb8 as Arbitrary<T8>,arb9 as Arbitrary<T9>,arb10 as Arbitrary<T10>,arb11 as Arbitrary<T11>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11]));
        }

        if (arb11) {
            const p = arb11 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>,arb6 as Arbitrary<T6>,arb7 as Arbitrary<T7>,arb8 as Arbitrary<T8>,arb9 as Arbitrary<T9>,arb10 as Arbitrary<T10>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10]));
        }

        if (arb10) {
            const p = arb10 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>,arb6 as Arbitrary<T6>,arb7 as Arbitrary<T7>,arb8 as Arbitrary<T8>,arb9 as Arbitrary<T9>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9]));
        }

        if (arb9) {
            const p = arb9 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>,arb6 as Arbitrary<T6>,arb7 as Arbitrary<T7>,arb8 as Arbitrary<T8>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8]));
        }

        if (arb8) {
            const p = arb8 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>,arb6 as Arbitrary<T6>,arb7 as Arbitrary<T7>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7]));
        }

        if (arb7) {
            const p = arb7 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>,arb6 as Arbitrary<T6>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5],t[6]));
        }

        if (arb6) {
            const p = arb6 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4,t5:T5) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>,arb5 as Arbitrary<T5>)
                    , t => p(t[0],t[1],t[2],t[3],t[4],t[5]));
        }

        if (arb5) {
            const p = arb5 as (t0:T0,t1:T1,t2:T2,t3:T3,t4:T4) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>,arb4 as Arbitrary<T4>)
                    , t => p(t[0],t[1],t[2],t[3],t[4]));
        }

        if (arb4) {
            const p = arb4 as (t0:T0,t1:T1,t2:T2,t3:T3) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>,arb3 as Arbitrary<T3>)
                    , t => p(t[0],t[1],t[2],t[3]));
        }

        if (arb3) {
            const p = arb3 as (t0:T0,t1:T1,t2:T2) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>,arb2 as Arbitrary<T2>)
                    , t => p(t[0],t[1],t[2]));
        }

        if (arb2) {
            const p = arb2 as (t0:T0,t1:T1) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>,arb1 as Arbitrary<T1>)
                    , t => p(t[0],t[1]));
        }

        if (arb1) {
            const p = arb1 as (t0:T0) => Promise<boolean|void>;
            return new AsyncProperty(
                    tuple(arb0 as Arbitrary<T0>)
                    , t => p(t[0]));
        }
}
export { asyncProperty };